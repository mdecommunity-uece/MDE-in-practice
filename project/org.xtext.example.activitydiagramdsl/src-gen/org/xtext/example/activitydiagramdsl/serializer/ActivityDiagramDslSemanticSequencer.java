/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.activitydiagramdsl.serializer;

import activitydiagram.ActivityDiagram;
import activitydiagram.ActivityNode;
import activitydiagram.ActivitydiagramPackage;
import activitydiagram.DecisionNode;
import activitydiagram.FinalNode;
import activitydiagram.ForkNode;
import activitydiagram.InitialNode;
import activitydiagram.JoinNode;
import activitydiagram.Node;
import activitydiagram.Transition;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.activitydiagramdsl.services.ActivityDiagramDslGrammarAccess;

@SuppressWarnings("all")
public class ActivityDiagramDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ActivityDiagramDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ActivitydiagramPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ActivitydiagramPackage.ACTIVITY_DIAGRAM:
				sequence_ActivityDiagram(context, (ActivityDiagram) semanticObject); 
				return; 
			case ActivitydiagramPackage.ACTIVITY_NODE:
				sequence_ActivityNode(context, (ActivityNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.DECISION_NODE:
				sequence_DecisionNode(context, (DecisionNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.FINAL_NODE:
				sequence_FinalNode(context, (FinalNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.FORK_NODE:
				sequence_ForkNode(context, (ForkNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.INITIAL_NODE:
				sequence_InitialNode(context, (InitialNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.JOIN_NODE:
				sequence_JoinNode(context, (JoinNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.NODE:
				sequence_Node_Impl(context, (Node) semanticObject); 
				return; 
			case ActivitydiagramPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ActivityDiagram returns ActivityDiagram
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         initialNode=InitialNode? 
	 *         finalNode=FinalNode? 
	 *         (trasitions+=Transition trasitions+=Transition*)? 
	 *         (activityNodes+=ActivityNode activityNodes+=ActivityNode*)? 
	 *         (forkNodes+=ForkNode forkNodes+=ForkNode*)? 
	 *         (joinNodes+=JoinNode joinNodes+=JoinNode*)? 
	 *         (decisionNodes+=DecisionNode decisionNodes+=DecisionNode*)?
	 *     )
	 */
	protected void sequence_ActivityDiagram(ISerializationContext context, ActivityDiagram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Node returns ActivityNode
	 *     ActivityNode returns ActivityNode
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (incoming+=[Transition|EString] incoming+=[Transition|EString]*)? 
	 *         (outgoing+=[Transition|EString] outgoing+=[Transition|EString]*)?
	 *     )
	 */
	protected void sequence_ActivityNode(ISerializationContext context, ActivityNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Node returns DecisionNode
	 *     DecisionNode returns DecisionNode
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (incoming+=[Transition|EString] incoming+=[Transition|EString]*)? 
	 *         (outgoing+=[Transition|EString] outgoing+=[Transition|EString]*)?
	 *     )
	 */
	protected void sequence_DecisionNode(ISerializationContext context, DecisionNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Node returns FinalNode
	 *     FinalNode returns FinalNode
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (incoming+=[Transition|EString] incoming+=[Transition|EString]*)? 
	 *         (outgoing+=[Transition|EString] outgoing+=[Transition|EString]*)?
	 *     )
	 */
	protected void sequence_FinalNode(ISerializationContext context, FinalNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Node returns ForkNode
	 *     ForkNode returns ForkNode
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (incoming+=[Transition|EString] incoming+=[Transition|EString]*)? 
	 *         (outgoing+=[Transition|EString] outgoing+=[Transition|EString]*)?
	 *     )
	 */
	protected void sequence_ForkNode(ISerializationContext context, ForkNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Node returns InitialNode
	 *     InitialNode returns InitialNode
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (incoming+=[Transition|EString] incoming+=[Transition|EString]*)? 
	 *         (outgoing+=[Transition|EString] outgoing+=[Transition|EString]*)?
	 *     )
	 */
	protected void sequence_InitialNode(ISerializationContext context, InitialNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Node returns JoinNode
	 *     JoinNode returns JoinNode
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (incoming+=[Transition|EString] incoming+=[Transition|EString]*)? 
	 *         (outgoing+=[Transition|EString] outgoing+=[Transition|EString]*)?
	 *     )
	 */
	protected void sequence_JoinNode(ISerializationContext context, JoinNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Node returns Node
	 *     Node_Impl returns Node
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (incoming+=[Transition|EString] incoming+=[Transition|EString]*)? 
	 *         (outgoing+=[Transition|EString] outgoing+=[Transition|EString]*)?
	 *     )
	 */
	protected void sequence_Node_Impl(ISerializationContext context, Node semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (name=EString target=[Node|EString]? source=[Node|EString]?)
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
