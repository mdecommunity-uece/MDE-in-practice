/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.activitydiagramdsl.formatting2;

import activitydiagram.ActivityDiagram;
import activitydiagram.ActivityNode;
import activitydiagram.DecisionNode;
import activitydiagram.FinalNode;
import activitydiagram.ForkNode;
import activitydiagram.InitialNode;
import activitydiagram.JoinNode;
import activitydiagram.Transition;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.activitydiagramdsl.services.ActivityDiagramDslGrammarAccess;

@SuppressWarnings("all")
public class ActivityDiagramDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private ActivityDiagramDslGrammarAccess _activityDiagramDslGrammarAccess;
  
  protected void _format(final ActivityDiagram activityDiagram, @Extension final IFormattableDocument document) {
    document.<InitialNode>format(activityDiagram.getInitialNode());
    document.<FinalNode>format(activityDiagram.getFinalNode());
    EList<Transition> _trasitions = activityDiagram.getTrasitions();
    for (final Transition transition : _trasitions) {
      document.<Transition>format(transition);
    }
    EList<ActivityNode> _activityNodes = activityDiagram.getActivityNodes();
    for (final ActivityNode activityNode : _activityNodes) {
      document.<ActivityNode>format(activityNode);
    }
    EList<ForkNode> _forkNodes = activityDiagram.getForkNodes();
    for (final ForkNode forkNode : _forkNodes) {
      document.<ForkNode>format(forkNode);
    }
    EList<JoinNode> _joinNodes = activityDiagram.getJoinNodes();
    for (final JoinNode joinNode : _joinNodes) {
      document.<JoinNode>format(joinNode);
    }
    EList<DecisionNode> _decisionNodes = activityDiagram.getDecisionNodes();
    for (final DecisionNode decisionNode : _decisionNodes) {
      document.<DecisionNode>format(decisionNode);
    }
  }
  
  public void format(final Object activityDiagram, final IFormattableDocument document) {
    if (activityDiagram instanceof XtextResource) {
      _format((XtextResource)activityDiagram, document);
      return;
    } else if (activityDiagram instanceof ActivityDiagram) {
      _format((ActivityDiagram)activityDiagram, document);
      return;
    } else if (activityDiagram instanceof EObject) {
      _format((EObject)activityDiagram, document);
      return;
    } else if (activityDiagram == null) {
      _format((Void)null, document);
      return;
    } else if (activityDiagram != null) {
      _format(activityDiagram, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(activityDiagram, document).toString());
    }
  }
}
