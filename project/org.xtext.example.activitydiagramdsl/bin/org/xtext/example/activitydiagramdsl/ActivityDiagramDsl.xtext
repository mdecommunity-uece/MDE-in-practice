// automatically generated by Xtext
grammar org.xtext.example.activitydiagramdsl.ActivityDiagramDsl with org.eclipse.xtext.common.Terminals

import "activitydiagram" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ActivityDiagram returns ActivityDiagram:
	{ActivityDiagram}
	'ActivityDiagram'
	name=EString
	'{'
		('initialNode' initialNode=InitialNode)?
		('finalNode' finalNode=FinalNode)?
		('trasitions' '{' trasitions+=Transition ( "," trasitions+=Transition)* '}' )?
		('activityNodes' '{' activityNodes+=ActivityNode ( "," activityNodes+=ActivityNode)* '}' )?
		('forkNodes' '{' forkNodes+=ForkNode ( "," forkNodes+=ForkNode)* '}' )?
		('joinNodes' '{' joinNodes+=JoinNode ( "," joinNodes+=JoinNode)* '}' )?
		('decisionNodes' '{' decisionNodes+=DecisionNode ( "," decisionNodes+=DecisionNode)* '}' )?
	'}';








Node returns Node:
	Node_Impl | FinalNode | InitialNode | ActivityNode | DecisionNode | ForkNode | JoinNode;

EString returns ecore::EString:
	STRING | ID;

InitialNode returns InitialNode:
	{InitialNode}
	'InitialNode'
	name=EString
	'{'
		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
		('outgoing' '(' outgoing+=[Transition|EString] ( "," outgoing+=[Transition|EString])* ')' )?
	'}';

FinalNode returns FinalNode:
	{FinalNode}
	'FinalNode'
	name=EString
	'{'
		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
		('outgoing' '(' outgoing+=[Transition|EString] ( "," outgoing+=[Transition|EString])* ')' )?
	'}';

Transition returns Transition:
	{Transition}
	'Transition'
	name=EString
	'{'
		('target' target=[Node|EString])?
		('source' source=[Node|EString])?
	'}';

ActivityNode returns ActivityNode:
	{ActivityNode}
	'ActivityNode'
	name=EString
	'{'
		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
		('outgoing' '(' outgoing+=[Transition|EString] ( "," outgoing+=[Transition|EString])* ')' )?
	'}';

ForkNode returns ForkNode:
	{ForkNode}
	'ForkNode'
	name=EString
	'{'
		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
		('outgoing' '(' outgoing+=[Transition|EString] ( "," outgoing+=[Transition|EString])* ')' )?
	'}';

JoinNode returns JoinNode:
	{JoinNode}
	'JoinNode'
	name=EString
	'{'
		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
		('outgoing' '(' outgoing+=[Transition|EString] ( "," outgoing+=[Transition|EString])* ')' )?
	'}';

DecisionNode returns DecisionNode:
	{DecisionNode}
	'DecisionNode'
	name=EString
	'{'
		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
		('outgoing' '(' outgoing+=[Transition|EString] ( "," outgoing+=[Transition|EString])* ')' )?
	'}';

Node_Impl returns Node:
	{Node}
	'Node'
	name=EString
	'{'
		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
		('outgoing' '(' outgoing+=[Transition|EString] ( "," outgoing+=[Transition|EString])* ')' )?
	'}';
